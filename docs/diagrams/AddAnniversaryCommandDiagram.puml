@startuml
package seedu.address.logic.parser.anniversary {
    class AddAnniversaryCommandParser {
        + parse(String args) : AddAnniversaryCommand
    }
    class AnniversaryParserUtils {
        + parseAnniversary(ArgumentMultimap argMultimap) : Anniversary
    }
}
package seedu.address.logic.parser {
    class ParserUtil {
    + parseEmployeeIdPrefix(String employeeIdPrefix) : EmployeeId
    }
}

package "seedu.address.logic.commands {
    abstract class Command {
    + CommandResult execute(Model model) {abstract}
    }
}

package seedu.address.model {
    interface Model {
        + getFilteredByEmployeeIdPrefixList(EmployeeId employeeIdPrefix) : List<Person>
        + setPerson(Person target, Person editedPerson) : void
    }
}

package seedu.address.logic.commands.anniversary {
    class AddAnniversaryCommand {
        - toAdd : Anniversary
        - employeeIdPrefix : EmployeeId
        --
        + AddAnniversaryCommand(EmployeeId employeeIdPrefix, Anniversary anniversary)
        + execute(Model model) : CommandResult
    }
}

package seedu.address.model.anniversary {
    class Anniversary {
        - date : LocalDate
        - name : String
        - description : String
        - type : AnniversaryType
        --
        + Anniversary(LocalDate date, String name, String description, String type)
    }
    class AnniversaryType {
    - type : String}
        - description : String
        --
        + AnniversaryType(String type, String description)
    }
}
package seedu.address.model.person {
    class EmployeeId {
        - employeeId : UUID
        --
        + EmployeeId(UUID employeeId)
    }
    class Person {
    - employeeId : EmployeeId
        - name : Name
        - jobPosition : JobPosition
        - email : Email
        - phone : Phone
        - tags : Set<Tag>
        - anniversaries : List<Anniversary>
        --
        + Person(EmployeeId employeeId, Name name, JobPosition jobPosition, Email email, Phone phone, Set<Tag> tags, List<Anniversary> anniversaries)
    }
}

AddAnniversaryCommand --|> Command
AddAnniversaryCommandParser --> "1" AddAnniversaryCommand : creates
AddAnniversaryCommandParser --> AnniversaryParserUtils : uses
AddAnniversaryCommandParser -> ParserUtil : uses
ParserUtil --> "1" EmployeeId : creates
AnniversaryParserUtils -> "1" Anniversary : creates
AddAnniversaryCommand --> "1" CommandResult : returns
AddAnniversaryCommand --> "1" EmployeeId : uses
AddAnniversaryCommand -> Person : processes
AddAnniversaryCommand -> "1" Person : finds for update
AddAnniversaryCommand -> Model : updates



@enduml



// AddAnniversaryCommand.java


/**
 * Adds an anniversary to an existing Person in the address book.
 */

    /**
     * Creates an AddAnniversaryCommand to add the specified {@code Anniversary} to the person with given employeeId.
     */
    public AddAnniversaryCommand(EmployeeId employeeIdPrefix, Anniversary anniversary) {
        requireNonNull(employeeIdPrefix);
        requireNonNull(anniversary);
        this.employeeIdPrefix = employeeIdPrefix;
        this.toAdd = anniversary;
    }

    @Override
    public CommandResult execute(Model model) throws CommandException {
        requireNonNull(model);
        List<Person> matchedEmployees = model.getFilteredByEmployeeIdPrefixList(employeeIdPrefix);

        if (matchedEmployees.size() > 1) {
            throw new CommandException(String.format(
                    Messages.MESSAGE_MULTIPLE_EMPLOYEES_FOUND_WITH_PREFIX,
                    employeeIdPrefix
            ));
        }

        if (matchedEmployees.isEmpty()) {
            throw new CommandException(String.format(
                    Messages.MESSAGE_PERSON_PREFIX_NOT_FOUND,
                    employeeIdPrefix
            ));
        }

        Person personToEdit = matchedEmployees.get(0);

        // Check if the same anniversary already exists
        boolean duplicate = personToEdit.getAnniversaries().stream()
                .anyMatch(existing ->
                        existing.getDate().equals(toAdd.getDate())
                                && existing.getName().equals(toAdd.getName())
                                && existing.getDescription().equals(toAdd.getDescription())
                                && existing.getType().equals(toAdd.getType())
                );
        if (duplicate) {
            throw new CommandException(MESSAGE_DUPLICATE_ANNIVERSARY);
        }

        // Create a new Person object with updated anniversaries
        List<Anniversary> anniversaryList = new ArrayList<>(personToEdit.getAnniversaries());
        anniversaryList.add(toAdd);
        Person updatedPerson = Person.builder()
                .employeeId(personToEdit.getEmployeeId())
                .name(personToEdit.getName())
                .jobPosition(personToEdit.getJobPosition())
                .email(personToEdit.getEmail())
                .phone(personToEdit.getPhone())
                .tags(personToEdit.getTags())
                .anniversaries(anniversaryList).build();

        // update the model
        model.setPerson(personToEdit, updatedPerson);

        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));
    }
}
