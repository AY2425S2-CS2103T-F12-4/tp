@startuml
title Import/Export Classes
skinparam packageTitleFontStyle Bold
skinparam classAttributeIconSize 0

package "seedu.address.logic.parser" {
    class exportCommandParser {
        --
        + ExportCommand parse(String args) : ExportCommand
    }
}

package "seedu.address.logic.parser" {
    class FilePathResolverUtils {
        - static String BLANK
        --
        + Path resolveFilePath(String filePath, String filename, String fileType) : Path
        - looksLikeFile(Path path) : boolean
        - ensureCorrectExtension(String name, String requiredExt) : String
        - validateFileExtension(String fileName, String expectedExtension, String fileType) : void
        + verifyFileTypePresentAndValid(ArgumentMultimap argMultimap, String commandType) : void
    }
}

package "seedu.address.logic.commands.importexport" {
    class ExportCommand {
        + COMMAND_WORD : String
        + MESSAGE_USAGE : String
        - logger : Logger
        - filetype : String
        - path : Path
        --
        + ExportCommand(String filetype, Path path) : ExportCommand
        + execute(Model model) : CommandResult
    }

    class AddressBookFormatConverter {
            + static JsonSerializableAddressBook importFromJson(Path filePath)
            + static JsonSerializableAddressBook importFromCsv(Path filePath)
            + static void exportToJson(ObservableList<Person> displayedPeople, Path filePath)
            + static void exportToCsv(ObservableList<Person> displayedPeople, Path filePath)
            --
            - static ReadOnlyAddressBook createTempAddressBook(ObservableList<Person> personList)
            - static JsonSerializableAddressBook csvToAddressBook(String csvData)
            - static String addressBookToCsv(JsonSerializableAddressBook addressBook)
    }
}

exportCommandParser --> "1" ExportCommand : creates
exportCommandParser -> FilePathResolverUtils : uses
ExportCommand -> AddressBookFormatConverter : uses
ExportCommand -> "1" CommandResult : returns
AddressBookFormatConverter -> "1" Files : writes to
AddressBookFormatConverter --> "1" JsonSerializableAddressBook : creates


'import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;
'import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;
'import static seedu.address.logic.parser.CliSyntax.PREFIX_FILETYPE;
'import static seedu.address.logic.parser.FilePathResolverUtils.verifyFileTypePresentAndValid;
'
'import java.nio.file.Path;
'
'import seedu.address.logic.commands.importexport.ExportCommand;
'import seedu.address.logic.parser.exceptions.ParseException;

'/**
' * Parses input arguments and creates a new ExportCommand object
' */
'public class ExportCommandParser implements Parser<ExportCommand> {
'
'    /**
'     * Parses the given {@code String} of arguments in the context of the ExportCommand
'     * and returns a ExportCommand object for execution.
'     * @throws ParseException if the user input does not conform the expected format
'     */
'    public ExportCommand parse(String args) throws ParseException {
'        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(
'                args,
'                PREFIX_FILEPATH,
'                PREFIX_FILETYPE,
'                PREFIX_FILENAME
'        );
'
'        String trimmedArgs = args.trim();
'        verifyFileTypePresentAndValid(argMultimap, ExportCommand.MESSAGE_USAGE);
'        String filePath = argMultimap.getValue(PREFIX_FILEPATH).orElse(null);
'        String filename = argMultimap.getValue(PREFIX_FILENAME).orElse(null);
'        String fileType = argMultimap.getValue(PREFIX_FILETYPE).get();
'        Path path = null;
'        if (filePath != null || filename != null) {
'            path = FilePathResolverUtils.resolveFilePath(filePath, filename, fileType);
'        }
'        return new ExportCommand(fileType, path);
'    }
'}


'package seedu.address.logic.commands.importexport;
'
'import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;
'import static seedu.address.logic.parser.CliSyntax.PREFIX_FILETYPE;
'
'import java.nio.file.Path;
'import java.util.logging.Logger;
'
'import javafx.collections.ObservableList;
'import lombok.Getter;
'import seedu.address.commons.core.LogsCenter;
'import seedu.address.logic.commands.Command;
'import seedu.address.logic.commands.CommandResult;
'import seedu.address.logic.commands.exceptions.CommandException;
'import seedu.address.model.Model;
'import seedu.address.model.person.Person;
'
'/**
' * Exports currently visible persons data to a file.
' */
'@Getter
'public class ExportCommand extends Command {
'    public static final String COMMAND_WORD = "export";
'    public static final String MESSAGE_USAGE = "export "
'            + PREFIX_FILETYPE + "<json / csv> ["
'            + PREFIX_FILEPATH + "<path>]";
'    private static final Logger logger = LogsCenter.getLogger(ExportCommand.class);
'    public final String filetype;
'    public final Path path;
'
'    /**
'     * Creates an ExportCommand to export the specified {@code Person}
'     * @param filetype json or csv source file
'     * @param path path to the file
'     */
'    public ExportCommand(String filetype, Path path) {
'        this.filetype = filetype;
'        this.path = path;
'    }
'    @Override
'    public CommandResult execute(Model model) throws CommandException {
'        ObservableList<Person> displayedPeople = model.getFilteredPersonList();
'        if (displayedPeople.isEmpty()) {
'            throw new CommandException("No people to export.");
'        }
'        try {
'            if (filetype.equals("json")) {
'                logger.info(String.format("Exporting to json + %s, %s", path , displayedPeople));
'                AddressBookFormatConverter.exportToJson(displayedPeople, path);
'            } else if (filetype.equals("csv")) {
'                logger.info(String.format("Exporting to CSV + %s, %s", path , displayedPeople));
'                AddressBookFormatConverter.exportToCsv(displayedPeople, path);
'            } else {
'                throw new CommandException("Invalid filetype. " + MESSAGE_USAGE);
'            }
'        } catch (Exception e) {
'            throw new CommandException("Error exporting data: " + e.getMessage());
'        }
'        return new CommandResult("Exported " + displayedPeople + " people in " + filetype
'                + " format to " + path);
'    }
'}

@enduml